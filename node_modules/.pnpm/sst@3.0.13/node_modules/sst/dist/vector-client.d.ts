import { Resource } from "./resource.js";
export type IngestEvent = {
    /**
     * The text used to generate the embedding vector.
     * At least one of `text` or `image` must be provided.
     * @example
     * ```js
     * {
     *   text: "This is an example text.",
     * }
     * ```
     */
    text?: string;
    /**
     * The base64 representation of the image used to generate the embedding vector.
     * At least one of `text` or `image` must be provided.
     * @example
     * ```js
     * {
     *   image: await fs.readFile("./file.jpg").toString("base64"),
     * }
     * ```
     */
    image?: string;
    /**
     * Metadata for the event in JSON format.
     * This metadata will be used to filter when retrieving and removing embeddings.
     * @example
     * ```js
     * {
     *   metadata: {
     *     type: "movie",
     *     id: "movie-123",
     *     name: "Spiderman",
     *   }
     * }
     * ```
     */
    metadata: Record<string, any>;
};
export type RetrieveEvent = {
    /**
     * The text prompt used to retrieve embeddings.
     * At least one of `text` or `image` must be provided.
     * @example
     * ```js
     * {
     *   text: "This is an example text.",
     * }
     * ```
     */
    text?: string;
    /**
     * The base64 representation of the image prompt used to retrive embeddings.
     * At least one of `text` or `image` must be provided.
     * @example
     * ```js
     * {
     *   image: await fs.readFile("./file.jpg").toString("base64"),
     * }
     * ```
     */
    image?: string;
    /**
     * The metadata used to filter the retrieval of embeddings.
     * Only embeddings with metadata that match the provided fields will be returned.
     * @example
     * ```js
     * {
     *   include: {
     *     type: "movie",
     *     release: "2001",
     *   }
     * }
     * ```
     * This will match the embedding with metadata:
     *  {
     *    type: "movie",
     *    name: "Spiderman",
     *    release: "2001",
     *  }
     *
     * But not the embedding with metadata:
     *  {
     *    type: "book",
     *    name: "Spiderman",
     *    release: "2001",
     *  }
     */
    include: Record<string, any>;
    /**
     * Exclude embeddings with metadata that match the provided fields.
     * @example
     * ```js
     * {
     *   include: {
     *     type: "movie",
     *     release: "2001",
     *   },
     *   exclude: {
     *     name: "Spiderman",
     *   }
     * }
     * ```
     * This will match the embedding with metadata:
     *  {
     *    type: "movie",
     *    name: "A Beautiful Mind",
     *    release: "2001",
     *  }
     *
     * But not the embedding with metadata:
     *  {
     *    type: "book",
     *    name: "Spiderman",
     *    release: "2001",
     *  }
     */
    exclude?: Record<string, any>;
    /**
     * The threshold of similarity between the prompt and the retrieved embeddings.
     * Only embeddings with a similarity score higher than the threshold will be returned.
     * Expected value is between 0 and 1.
     * - 0 means the prompt and the retrieved embeddings are completely different.
     * - 1 means the prompt and the retrieved embeddings are identical.
     * @default `0`
     * @example
     * ```js
     * {
     *   threshold: 0.5,
     * }
     * ```
     */
    threshold?: number;
    /**
     * The number of results to return.
     * @default `10`
     * @example
     * ```js
     * {
     *   count: 10,
     * }
     * ```
     */
    count?: number;
};
export type RemoveEvent = {
    /**
     * The metadata used to filter the removal of embeddings.
     * Only embeddings with metadata that match the provided fields will be removed.
     * @example
     * To remove embeddings for movie with id "movie-123":
     * ```js
     * {
     *   include: {
     *     id: "movie-123",
     *   }
     * }
     * ```
     * To remove embeddings for all movies:
     *  {
     *   include: {
     *    type: "movie",
     *   }
     *  }
     */
    include: Record<string, any>;
};
type RetriveResponse = {
    /**
     * Metadata for the event in JSON format that was provided when ingesting the embedding.
     */
    metadata: Record<string, any>;
    /**
     * The similarity score between the prompt and the retrieved embedding.
     */
    score: number;
};
export declare function VectorClient<T extends keyof {
    [key in keyof Resource as "sst.aws.Vector" extends Resource[key]["type"] ? string extends key ? never : key : never]: Resource[key];
}>(name: T): {
    ingest: (event: IngestEvent) => Promise<void>;
    retrieve: (event: RetrieveEvent) => Promise<RetriveResponse>;
    remove: (event: RemoveEvent) => Promise<void>;
};
export {};
