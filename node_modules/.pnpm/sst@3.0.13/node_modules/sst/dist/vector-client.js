import { LambdaClient, InvokeCommand, } from "@aws-sdk/client-lambda";
import { Resource } from "./resource.js";
const lambda = new LambdaClient();
export function VectorClient(name) {
    return {
        ingest: async (event) => {
            const ret = await lambda.send(new InvokeCommand({
                FunctionName: Resource[name].ingestor,
                Payload: JSON.stringify(event),
            }));
            parsePayload(ret, "Failed to ingest into the vector db");
        },
        retrieve: async (event) => {
            const ret = await lambda.send(new InvokeCommand({
                FunctionName: Resource[name].retriever,
                Payload: JSON.stringify(event),
            }));
            return parsePayload(ret, "Failed to retrieve from the vector db");
        },
        remove: async (event) => {
            const ret = await lambda.send(new InvokeCommand({
                FunctionName: Resource[name].remover,
                Payload: JSON.stringify(event),
            }));
            parsePayload(ret, "Failed to remove from the vector db");
        },
    };
}
function parsePayload(output, message) {
    const payload = JSON.parse(Buffer.from(output.Payload).toString());
    // Set cause to the payload so that it can be logged in CloudWatch
    if (output.FunctionError) {
        const e = new Error(message);
        e.cause = payload;
        throw e;
    }
    return payload;
}
